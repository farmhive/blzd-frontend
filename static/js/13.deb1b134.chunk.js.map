{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useStake.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","totalValueFormated","lpLabel","isTokenOnly","TranslateString","useI18n","liquidityUrlPathParts","pancakeLink","link","includes","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","flexDirection","src","alt","width","height","useUnstake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onUnstake","useCallback","amount","a","unstake","txHash","fetchFarmUserDataAsync","console","info","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","times","toString","WithdrawModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","StakeAction","stakedBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentWithdraw","style","useStake","onStake","stake","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","canCompound","rawEarningsBalance","scale","marginBottom","borderRadius","marginTop","Action","CardActions","farm","ethereum","removed","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","tokenBalance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","fontSize","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmFinishedSash","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceBlzdBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","farmsList","farmsToDisplay","cakeRewardPerYear","blzdPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/13.deb1b134.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(6307200)\nexport const BSC_BLOCK_TIME = 5\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@farmhive/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'BNB' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@farmhive/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  isTokenOnly?: boolean\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  // removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  isTokenOnly,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const pancakeLink = isTokenOnly\n    ? `https://app.honeyswap.org/#/swap?outputCurrency=${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n    : `https://app.honeyswap.org/#/add/${liquidityUrlPathParts}`\n  const link = lpLabel.includes('vBSWAP') ? 'https://bsc.valuedefi.io/#/vswap' : pancakeLink\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={link}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormated}</Text>\n      </Flex>\n\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@farmhive/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@farmhive/uikit'\nimport { NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, farmImage, tokenSymbol, depositFee }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n      <Image\n        src={`https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/farms/${farmImage}.png`}\n        alt={tokenSymbol}\n        width={64}\n        height={64}\n      />\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { unstake } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@farmhive/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@farmhive/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\n// import styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, useModal } from '@farmhive/uikit'\n// import useI18n from 'hooks/useI18n'\n// import useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\n// import DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\n// const IconButtonWrapper = styled.div`\n//   display: flex;\n//   svg {\n//     width: 20px;\n//   }\n// `\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenName, pid }) => {\n  // const TranslateString = useI18n()\n  // const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  // const [onPresentDeposit] = useModal(\n  //   <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  // )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  // const renderStakingButtons = () => {\n  //   return rawStakedBalance === 0 ? (\n  //     <Button style={{ width: 107.72 }} onClick={onPresentDeposit}>\n  //       {TranslateString(999, 'Stake')}\n  //     </Button>\n  //   ) : (\n  //     <IconButtonWrapper>\n  //       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n  //         <MinusIcon color=\"primary\" />\n  //       </IconButton>\n  //       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentDeposit}>\n  //         <AddIcon color=\"primary\" />\n  //       </IconButton>\n  //     </IconButtonWrapper>\n  //   )\n  // }\n\n  const renderUnstakingButtons = () => {\n    return (\n      <Button style={{ width: 107.72 }} onClick={onPresentWithdraw}>\n        Unstake\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderUnstakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { stake } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@farmhive/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  > button {\n    width: 100%;\n  }\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const canCompound = pid === 0\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {canCompound ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            scale=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"8px\"\n            style={{ borderRadius: 12 }}\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          scale={canCompound ? 'sm' : 'md'}\n          style={{\n            borderRadius: !canCompound ? 16 : 12,\n            marginTop: !canCompound ? 8 : 0,\n            marginBottom: !canCompound ? 8 : 0,\n          }}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@farmhive/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  removed: boolean\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, removed }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return removed || isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button style={{ width: '100%' }} mt=\"8px\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          BLZD\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { getxBlzdAddress } from 'utils/addressHelpers'\nimport { useMasterchef, useCake, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve xBLZD\nexport const useXBlzdApprove = () => {\n  const { account } = useWallet()\n  const cakeContract = useCake()\n\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await cakeContract.methods\n        .approve(getxBlzdAddress(), ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, cakeContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@farmhive/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'FHIVE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://app.honeyswap.org/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@farmhive/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@farmhive/uikit'\n// import { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'FHIVE'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, isTokenOnly } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'FHIVE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {removed && <FarmFinishedSash />}\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\" style={{ marginBottom: 12 }}>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} removed={removed} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://blockscout.com/xdai/mainnet/tokens/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://blockscout.com/xdai/mainnet/tokens/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          isTokenOnly={isTokenOnly}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nconst FarmFinishedSash = styled.div`\n  background-image: url('https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/pool-finished-sash.svg');\n  background-position: top right;\n  background-repeat: not-repeat;\n  height: 135px;\n  position: absolute;\n  right: -24px;\n  top: -24px;\n  width: 135px;\n`\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@farmhive/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(999, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(999, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Heading } from '@farmhive/uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceBlzdBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceBlzdBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.blzdPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {tokenMode\n          ? TranslateString(10002, 'Stake tokens to earn BLZD')\n          : TranslateString(320, 'Stake LP tokens to earn BLZD')}\n      </Heading>\n      <FarmTabButtons />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}