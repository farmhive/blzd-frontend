{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/BlzdHarvestBalance.tsx","views/Home/components/BlzdWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/BlzdStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","BlzdHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","BlzdWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","TokenImageWrapper","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","addWatchBlzdToken","provider","window","ethereum","request","method","type","options","symbol","image","console","log","size","mb","src","alt","width","height","onClick","scale","marginLeft","id","disabled","length","UnlockButton","fullWidth","StyledBlzdStats","Row","BlzdStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","farms","useFarms","blzdPrice","usePriceBlzdBusd","circSupply","minus","blzdSupply","marketCap","times","blzdPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/9.6de9d729.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingBlzd',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingBlzd',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@blzd-dev/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@blzd-dev/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst BlzdHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default BlzdHarvestBalance\n","import React from 'react'\nimport { Text } from '@blzd-dev/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst BlzdWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default BlzdWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@blzd-dev/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport BlzdHarvestBalance from './BlzdHarvestBalance'\nimport BlzdWalletBalance from './BlzdWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/blzd/2a.png');\n  background-size: 256px;\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst TokenImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-right: 8px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  const addWatchBlzdToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: '0x57067A6BD75c0E95a6A5f158455926e43E79BeB0',\n              symbol: 'BLZD',\n              decimals: '18',\n              image:\n                'https://blizzard.moneyhttps://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/farms/blzd.png',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <TokenImageWrapper>\n          <CardImage\n            src=\"https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/blzd/2.png\"\n            alt=\"blzd logo\"\n            width={64}\n            height={64}\n          />\n          <Button onClick={addWatchBlzdToken} scale=\"sm\">\n            +{' '}\n            <img\n              style={{ marginLeft: 8 }}\n              width={16}\n              src=\"https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/wallet/metamask.png\"\n              alt=\"metamask logo\"\n            />\n          </Button>\n        </TokenImageWrapper>\n        <Block>\n          <BlzdHarvestBalance />\n          <Label>{TranslateString(544, 'BLZD to Harvest')}</Label>\n        </Block>\n        <Block>\n          <BlzdWalletBalance />\n          <Label>{TranslateString(546, 'BLZD in Wallet')}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button id=\"harvest-all\" disabled={balancesWithValue.length <= 0 || pendingTx} onClick={harvestAllFarms}>\n              {pendingTx\n                ? TranslateString(548, 'Collecting BLZD')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@blzd-dev/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceBlzdBusd } from '../../../state/hooks'\n\nconst StyledBlzdStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst BlzdStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const blzdPrice = usePriceBlzdBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const blzdSupply = getBalanceNumber(circSupply)\n  const marketCap = blzdPrice.times(circSupply)\n\n  let blzdPerBlock = 0\n  if (farms && farms[0] && farms[0].blzdPerBlock) {\n    blzdPerBlock = new BigNumber(farms[0].blzdPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledBlzdStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'BLZD Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total BLZD Supply')}</Text>\n          {blzdSupply && <CardValue fontSize=\"14px\" value={blzdSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total BLZD Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New BLZD/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {blzdPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledBlzdStats>\n  )\n}\n\nexport default BlzdStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Text } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\n// import { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\n// import LotteryCard from './components/LotteryCard'\nimport BlzdStats from './components/BlzdStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\n// import TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/blzd/3.png');\n  background-size: 110px;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/blzd/3.png'),\n      url('https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/blzd/3b.png');\n    background-size: 150px;\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\n          {TranslateString(576, 'BLIZZARD.MONEY')}\n        </Heading>\n        <Text>{TranslateString(578, 'The best DEFI app on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <BlzdStats />\n        </Cards>\n      </div>\n      <TotalValueLockedCard />\n      {/* <TwitterCard/> */}\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}